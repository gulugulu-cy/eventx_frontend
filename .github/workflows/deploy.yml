name: Deploy to Server via Docker

on:
  push:
    branches: ["main"]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. 检出代码
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. 设置 Node.js 环境
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      # 3. 安装 pnpm
      - name: Install pnpm
        run: npm install -g pnpm

      - name: Cache pnpm dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.pnpm-store
            node_modules
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

      # 4. 安装依赖并构建
      - name: Install dependencies and build
        run: |
          pnpm install
          pnpm run build

      # 5. 登录 Docker Hub
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      # 6. 构建 Docker 镜像
      - name: Build Docker image
        run: |
          REPO_NAME=$(echo "$GITHUB_REPOSITORY" | cut -d'/' -f2 | sed 's/\.git$//')
          echo "REPO_NAME=${REPO_NAME}" >> $GITHUB_ENV
          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/${REPO_NAME}:latest .

      # 7. 推送 Docker 镜像
      - name: Push Docker image
        run: |
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.REPO_NAME }}:latest

      # 8. 部署到服务器（SSH 连接）
      - name: Deploy to server via SSH
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # 确保目录存在
            sudo mkdir -p /var/www/your-app
            cd /var/www/your-app || exit 1

            # 定义容器名称（使用GitHub仓库名）
            CONTAINER_NAME=$(echo "${{ github.repository }}" | cut -d'/' -f2 | sed 's/\.git$//')
            IMAGE_NAME="${{ secrets.DOCKER_HUB_USERNAME }}/${CONTAINER_NAME}:latest"

            echo "容器名称: ${CONTAINER_NAME}"
            echo "镜像名称: ${IMAGE_NAME}"

            # 拉取最新镜像
            docker pull ${IMAGE_NAME}

            # 停止并移除旧容器（使用双引号包裹变量）
            docker stop "${CONTAINER_NAME}" || echo "容器不存在，无需停止"
            docker rm "${CONTAINER_NAME}" || echo "容器不存在，无需移除"
            
            # 清理悬空镜像
            docker image prune -f
            
            # 运行新容器（使用双引号包裹变量）
            docker run -d \
              --name "${CONTAINER_NAME}" \
              --restart=always \
              -p 8080:80 \
              -v /resource:/resource \
              ${IMAGE_NAME}